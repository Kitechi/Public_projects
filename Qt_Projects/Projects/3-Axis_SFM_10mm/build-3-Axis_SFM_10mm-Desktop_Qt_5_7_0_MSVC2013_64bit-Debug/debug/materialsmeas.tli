// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (57bbe2ed).
//
// c:\qt\projects\salah_fsm_3-axis\build-fsm_3-axis_10mm-desktop_qt_5_7_0_msvc2013_64bit-debug\debug\materialsmeas.tli
//
// Wrapper implementations for Win32 type library C:\\MaterialsMeas.tlb
// compiler-generated file created 03/24/21 at 16:05:22 - DO NOT EDIT!

#pragma once

//
// interface ICoaxialProbe wrapper method implementations
//

inline HRESULT ICoaxialProbe::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::CalibrateProbe ( ) {
    HRESULT _hr = raw_CalibrateProbe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::TriggerProbe ( ) {
    HRESULT _hr = raw_TriggerProbe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetMeasurement ( long num, float * f, float * er, float * ei ) {
    HRESULT _hr = raw_GetMeasurement(num, f, er, ei);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetMeasurement ( double start, double stop, long num, long mode ) {
    HRESULT _hr = raw_SetMeasurement(start, stop, num, mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetNumberPoints ( long * num ) {
    HRESULT _hr = raw_GetNumberPoints(num);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetStartFrequency ( float * start ) {
    HRESULT _hr = raw_GetStartFrequency(start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetStopFrequency ( float * stop ) {
    HRESULT _hr = raw_GetStopFrequency(stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetS11Data ( long num, float * f, float * s11_real, float * s11_imag ) {
    HRESULT _hr = raw_GetS11Data(num, f, s11_real, s11_imag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetTemperature ( float * temperature ) {
    HRESULT _hr = raw_GetTemperature(temperature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetTemperature ( float temperature ) {
    HRESULT _hr = raw_SetTemperature(temperature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetRefreshStd ( int * std ) {
    HRESULT _hr = raw_GetRefreshStd(std);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetRefreshStd ( int std ) {
    HRESULT _hr = raw_SetRefreshStd(std);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetProbeType ( int * probe ) {
    HRESULT _hr = raw_GetProbeType(probe);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetProbeType ( int probe ) {
    HRESULT _hr = raw_SetProbeType(probe);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::GetCalType ( int * cal ) {
    HRESULT _hr = raw_GetCalType(cal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetCalType ( int cal ) {
    HRESULT _hr = raw_SetCalType(cal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SaveSetupFile ( _bstr_t file ) {
    HRESULT _hr = raw_SaveSetupFile(file);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::OpenSetupFile ( _bstr_t file ) {
    HRESULT _hr = raw_OpenSetupFile(file);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::AutoRefreshOnOff ( long * OnOff ) {
    HRESULT _hr = raw_AutoRefreshOnOff(OnOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::AutoRefreshOn ( ) {
    HRESULT _hr = raw_AutoRefreshOn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::AutoRefreshOff ( ) {
    HRESULT _hr = raw_AutoRefreshOff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::RefreshCal ( ) {
    HRESULT _hr = raw_RefreshCal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::CalibrateProbeStd1 ( ) {
    HRESULT _hr = raw_CalibrateProbeStd1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::CalibrateProbeStd2 ( ) {
    HRESULT _hr = raw_CalibrateProbeStd2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::CalibrateProbeStd3 ( ) {
    HRESULT _hr = raw_CalibrateProbeStd3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetIFBW ( float bw ) {
    HRESULT _hr = raw_SetIFBW(bw);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::ReadIFBW ( float * bw ) {
    HRESULT _hr = raw_ReadIFBW(bw);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SetPower ( float power ) {
    HRESULT _hr = raw_SetPower(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::ReadPower ( float * power ) {
    HRESULT _hr = raw_ReadPower(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::DataToMemory ( _bstr_t name ) {
    HRESULT _hr = raw_DataToMemory(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::Mean ( ) {
    HRESULT _hr = raw_Mean();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::StdDev ( ) {
    HRESULT _hr = raw_StdDev();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICoaxialProbe::SaveDataFile ( ) {
    HRESULT _hr = raw_SaveDataFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITransmissionLine wrapper method implementations
//

inline HRESULT ITransmissionLine::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::TriggerMeasurement ( ) {
    HRESULT _hr = raw_TriggerMeasurement();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::GetMeasurement ( long num, float * f, float * er, float * ei, float * ur, float * ui ) {
    HRESULT _hr = raw_GetMeasurement(num, f, er, ei, ur, ui);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SetMeasurement ( double start, double stop, long num, long mode ) {
    HRESULT _hr = raw_SetMeasurement(start, stop, num, mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SetSampleHolder ( double length, double distance, double thickness, long unit, long type, double fco ) {
    HRESULT _hr = raw_SetSampleHolder(length, distance, thickness, unit, type, fco);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::PerformGrlCal ( ) {
    HRESULT _hr = raw_PerformGrlCal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::OpenSetupFile ( _bstr_t file ) {
    HRESULT _hr = raw_OpenSetupFile(file);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SaveSetupFile ( _bstr_t file ) {
    HRESULT _hr = raw_SaveSetupFile(file);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::GetRotatedSparameters ( long num, float * f, float * s11r, float * s11i, float * s21r, float * s21i, float * s12r, float * s12i, float * s22r, float * s22i ) {
    HRESULT _hr = raw_GetRotatedSparameters(num, f, s11r, s11i, s21r, s21i, s12r, s12i, s22r, s22i);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SetIFBW ( float bw ) {
    HRESULT _hr = raw_SetIFBW(bw);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::ReadIFBW ( float * bw ) {
    HRESULT _hr = raw_ReadIFBW(bw);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SetPower ( float power ) {
    HRESULT _hr = raw_SetPower(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::ReadPower ( float * power ) {
    HRESULT _hr = raw_ReadPower(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::SetModel ( long model ) {
    HRESULT _hr = raw_SetModel(model);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::GetModel ( long * model ) {
    HRESULT _hr = raw_GetModel(model);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::GetCalForGRL ( ) {
    HRESULT _hr = raw_GetCalForGRL();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::MeasureGRLplate ( ) {
    HRESULT _hr = raw_MeasureGRLplate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::MeasureGRLempty ( ) {
    HRESULT _hr = raw_MeasureGRLempty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::ComputeGRL ( ) {
    HRESULT _hr = raw_ComputeGRL();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITransmissionLine::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IResonantCavity wrapper method implementations
//

inline HRESULT IResonantCavity::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::ShowDialog ( ) {
    HRESULT _hr = raw_ShowDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::MeasureFandQ ( float * fs, float * q ) {
    HRESULT _hr = raw_MeasureFandQ(fs, q);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::Zoom ( ) {
    HRESULT _hr = raw_Zoom();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::SetRange ( float StartFreq, float StopFreq, float power, float ifbw, int NumPoints ) {
    HRESULT _hr = raw_SetRange(StartFreq, StopFreq, power, ifbw, NumPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::CalculateASTM ( float vc, float fc, float qc, float vs, float fs, float qs, float * er, float * ei ) {
    HRESULT _hr = raw_CalculateASTM(vc, fc, qc, vs, fs, qs, er, ei);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IResonantCavity::CalculateSPDR ( float thickness, float fc, float qc, float fs, float qs, _bstr_t path, float * er, float * ei ) {
    HRESULT _hr = raw_CalculateSPDR(thickness, fc, qc, fs, qs, path, er, ei);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
