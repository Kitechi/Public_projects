#include "spectrogram.h"

spectrogram::spectrogram(QWidget *parent, structScan * scanInfoPtr_arg ,
                         short leftPosArg, short topPosArg, short widthArg, short heightArg,
                         QString titleArg, int noOfSlavesArg):
    QwtPlot( parent )
{
    this->scanInfoPtr = scanInfoPtr_arg;

    int y_length = (scanInfoPtr->scanHeight/scanInfoPtr->scanInterval)+1;
    int x_length = (scanInfoPtr->scanWidth/scanInfoPtr->scanInterval)+1;
    x_length = y_length = 51;
    //this->enableAxis(QwtPlot::yLeft, true);

    //this->enableAxis(QwtPlot::xTop, true);
    //this->enableAxis(QwtPlot::xBottom, false);
    scaleDrawXaxis = new MyScaleDraw;
    scaleDrawYaxis = new MyScaleDraw;

    this->axisScaleEngine(QwtPlot::yLeft)->setAttribute(QwtScaleEngine::Inverted,true);

    this->setAxisScaleDraw(QwtPlot::xBottom,scaleDrawXaxis);
    this->setAxisScaleDraw(QwtPlot::yLeft,scaleDrawYaxis);

    QwtPlotPicker* picker=new QwtPlotPicker(canvas());
    picker->setStateMachine(new QwtPickerClickPointMachine);
    //picker->setRubberBand( QwtPicker::CrossRubberBand );
    picker->setMousePattern(QwtPicker::MouseSelect1,Qt::MiddleButton);
    connect(picker,SIGNAL(selected(QPointF)),SLOT(selectPoint(QPointF)));

    d_spectrogram = new QwtPlotSpectrogram();
    d_spectrogram->setRenderThreadCount( 1 ); // use system specific thread count

    d_spectrogram->setColorMap( new ColorMap() );
    d_spectrogram->setCachePolicy( QwtPlotRasterItem::NoCache );

    data = new mydata(500,y_length,x_length);
    d_spectrogram->setData(data);
    d_spectrogram->attach( this );
/*
    QList<double> contourLevels;
    for ( double level = 0.5; level < 10.0; level += 1.0 )
        contourLevels += level;
    d_spectrogram->setContourLevels( contourLevels );
*/
    setcolorbar();

    plotLayout()->setAlignCanvasToScales( true );

    // LeftButton for the zooming
    // MidButton for the panning
    // RightButton: zoom out by 1
    // Ctrl+RighButton: zoom out to full size

    zoomer = new SpectZoomer( canvas() );
    zoomer->setMousePattern( QwtEventPattern::MouseSelect2,
        Qt::RightButton, Qt::ControlModifier );
    zoomer->setMousePattern( QwtEventPattern::MouseSelect3,
        Qt::RightButton );

    QwtPlotPanner *panner = new QwtPlotPanner( canvas() );
    panner->setAxisEnabled( QwtPlot::yRight, false );
    panner->setMouseButton( Qt::MidButton );


    // Avoid jumping when labels with more/less digits
    // appear/disappear when scrolling vertically
/*
    const QFontMetrics fm( axisWidget( QwtPlot::yLeft )->font() );
    QwtScaleDraw *sd = axisScaleDraw( QwtPlot::yLeft );
    sd->setMinimumExtent( fm.width( "100.00" ) );
*/
    const QColor c( Qt::darkBlue );
    zoomer->setRubberBandPen( c );
    zoomer->setTrackerPen( c );


    zoomer->zoom(QRectF::QRectF(0,0,x_length,y_length));
    zoomer->setZoomBase(QRectF::QRectF(0,0,x_length,y_length));

    qDebug()<<"spectrogram::spectrogram - x_length"<<x_length<<"y_length"<<y_length
           <<"canvasWidth"<<canvas()->width()
           <<"canvasHeight"<<canvas()->height();

    leftPos = leftPosArg;
    topPos  = topPosArg;
    width   = widthArg;
    height  = heightArg;
    this->setGeometry(QRect(leftPos,topPos,width,height));
    this->updateGeometry();

    title = titleArg;
    this->setTitle(title);
    replot();

    imageForMovie = NULL;
    painterForMovie = NULL;

    container        = parent;
    noOfSlaves       = noOfSlavesArg;
    isIntData        = false;
    isGreyForUWPI    = false;
}

spectrogram::~spectrogram()
{
    delete d_spectrogram;
    //delete data;
    delete zoomer;
    if (imageForMovie!=NULL)
        delete imageForMovie;
}
#define WIDTHOFYAXISANDCOLOURBAR            150
#define WIDTHOFYAXISANDCOLOURBARNOTITLE     124
#define HEIGHTOFBOTTOMXAXIS                 40


#define DSTBWSPECT  120
#define DSTBWSPECTPOTRAIT  40
#define CANSIZE     550
void spectrogram::updateAxisXY()
{
    int y_length = (scanInfoPtr->scanHeight/scanInfoPtr->scanInterval)+1;
    int x_length = (scanInfoPtr->scanWidth/scanInfoPtr->scanInterval)+1;
    int DefaultSize;

    data->x_length = x_length;
    data->y_length = y_length;
    data->updateDataAxis();


    zoomer->zoom(QRectF::QRectF(0,0,x_length,y_length));
    zoomer->setZoomBase(QRectF::QRectF(0,0,x_length,y_length));
    zoomer->scanInterval = scanInfoPtr->scanInterval;
    zoomer->x_length    =   x_length; // just for debug

    //re-draw scale
    scaleDrawXaxis->scanInterval = scanInfoPtr->scanInterval;
    scaleDrawYaxis->scanInterval = scanInfoPtr->scanInterval;

    scaleDrawYaxis->invalidateCacheLoc();
    scaleDrawXaxis->invalidateCacheLoc();
    axisWidget(yLeft)->update();
    axisWidget(xBottom)->update();

    float HtoWratio = (float)y_length/(float)x_length; //YtoXRatio
    float WtoHratio = (float)x_length/(float)y_length;
    int newWidth=width,newHeight=height;

    if (y_length<x_length)
    {
        if (HtoWratio >= 0.5) // 0.625 coz inverse is clean
        {   //only decrease the height
            //newHeight = HtoWratio*height;
            //setGeometry(QRect(leftPos,topPos, width,newHeight ));
            newHeight   = (HtoWratio)*(CANSIZE + HEIGHTOFBOTTOMXAXIS);
        }
        else
        {
            newWidth    = (0.5)*(WtoHratio)*(CANSIZE + WIDTHOFYAXISANDCOLOURBARNOTITLE);
            newHeight   = (0.5)*(CANSIZE + HEIGHTOFBOTTOMXAXIS);
        }

       setGeometry(QRect(leftPos,topPos, newWidth, newHeight));
       if (noOfSlaves > 0)//master sets the container
       {
           container->setGeometry(QRect(leftPos,topPos, newWidth, (noOfSlaves+1)*(newHeight+DSTBWSPECTPOTRAIT)-DSTBWSPECTPOTRAIT ));
           container->updateGeometry();
           emit placeSlave(leftPos, topPos+newHeight+DSTBWSPECTPOTRAIT); // draw slave below current spect
       }
    }
    else if (x_length<y_length)
    {
        if (WtoHratio >= 0.8) // 0.625 coz inverse is clean
        {   //only decrease the width
            newWidth    = (WtoHratio)*(CANSIZE + WIDTHOFYAXISANDCOLOURBARNOTITLE);
        }
        else
        {
            newWidth    = (0.8)*(CANSIZE + WIDTHOFYAXISANDCOLOURBARNOTITLE);
            newHeight   = (0.8)*(HtoWratio)*(CANSIZE + HEIGHTOFBOTTOMXAXIS);
        }

        setGeometry(QRect(leftPos,topPos, newWidth, newHeight));

        if (noOfSlaves > 0)//master sets the container
        {
            container->setGeometry(QRect(leftPos,topPos, (noOfSlaves+1)*(newWidth+DSTBWSPECT)-DSTBWSPECT, newHeight ));
            container->updateGeometry();
            emit placeSlave(leftPos+newWidth+DSTBWSPECT, topPos); // draw slave below current spect
        }

    }
    else if (y_length == x_length)
    {

        newWidth    = CANSIZE + WIDTHOFYAXISANDCOLOURBARNOTITLE;
        newHeight   = CANSIZE + HEIGHTOFBOTTOMXAXIS;

        height = newHeight;
        width = newWidth;

        setGeometry(QRect(leftPos,topPos, width, height));

        if ((noOfSlaves > 0))//master sets the container
        {
            container->setGeometry(QRect(leftPos,topPos, (noOfSlaves+1)*(width+DSTBWSPECT)-DSTBWSPECT, height ));
            container->updateGeometry();
            emit placeSlave(leftPos+width+DSTBWSPECT, topPos); // draw slave below current spect
        }
    }

    setcolorbar();
    this->updateGeometry();
    this->setTitle(title);
    replot();
    //repaint();

    qDebug()<<this->objectName()<<"noOfSlavesArg"<<noOfSlaves<<"spectrogram::updateAxisXY - x_length"<<x_length<<"y_length"<<y_length
           <<"canvasWidth"<<canvas()->width()
           <<"canvasHeight"<<canvas()->height();
}

void spectrogram::placeSlaveslot(int leftPos, int topPos)
{
    this->leftPos = leftPos;
    this->topPos = topPos;

    this->updateAxisXY();
}

void spectrogram::selectPoint( QPointF Pos )
{
    int PosXInt,PosYInt,SelectedImpingePoint;

    int y_length = (scanInfoPtr->scanHeight/scanInfoPtr->scanInterval)+1;
    int x_length = (scanInfoPtr->scanWidth/scanInfoPtr->scanInterval)+1;


   // Pos = Pos*info_Inspection.scanInterval.toFloat();

    PosXInt = Pos.x();
    PosYInt = Pos.y();

    //SelectedImpingePoint = (x_length) * ((y_length - 1)  - PosYInt)  + (PosXInt);
    //SelectedImpingePoint = (ScanWidth-1) * ((ScanHeight-2*(info_Inspection.scanInterval.toFloat())) - PosYInt)  + (PosXInt+1);
    SelectedImpingePoint = (x_length) * (PosYInt)  + (PosXInt);

    qDebug() << "selectPoint - Float("<<Pos.x() <<","<< Pos.y()<<")"
             <<"Int("<< PosXInt << PosYInt <<")"
            <<"Selected Impinge Point: "<<SelectedImpingePoint;
    if ( PosXInt >= 0 && PosYInt >= 0 && PosXInt < x_length && PosYInt < y_length)
    {
        //emit signal to plot for plotting
        emit pointToPlot(SelectedImpingePoint);
    }

    return;
}

void spectrogram::showSpectrogram( bool on )
{
    d_spectrogram->setDisplayMode( QwtPlotSpectrogram::ImageMode, on );
    d_spectrogram->setDefaultContourPen(on ? QPen( Qt::black, 0 ) : QPen( Qt::NoPen ) );
    replot();
}

/*
void Plot::setAlpha( int alpha )
{
    fnum=alpha;
    d_spectrogram->setData( new mydata(movie_type,fnum,dial) );
    d_spectrogram->attach( this );
    //QTest::qWait(1);
    replot();
}
*/

void spectrogram::setIntensity( int alpha )
{
    data->intensity = alpha;
    data->updateDataAxis();
    setcolorbar();
    plotLayout()->setAlignCanvasToScales( true );
    //d_spectrogram->attach( this ); // not needed
    replot();
}

/*
void Plot::stopper( int stopper )
{
    stop=stopper;
}
*/

// has to come from data processor
/*
void Plot::go_annimation()
{
//    for(fnum =0; fnum < 500 ; fnum++)
//    {
//        char file[35];
//        QwtPlotRenderer renderer;
//        QSizeF t3(13, 10);
//        t3.scale(130, 130, Qt::KeepAspectRatioByExpanding);

//        setAlpha(fnum);
//        QTest::qWait(1);
//        qDebug()<<fnum;
//        sprintf(file, "c:\\mydata\\uwpi%d.bmp", fnum);
//        renderer.renderDocument(this,file,t3,85);
//     }
//    SaveMovie();
    for(fnum =0; fnum < 500 ; fnum++)
    {
        setAlpha(fnum);
        QTest::qWait(1);
    qDebug()<<fnum;
        if (stop==1)
        {stop =0;
            break;}
    }
    fnum =84;
    setAlpha(fnum);
}
*/
void spectrogram::toggleUWPIGreyScale(bool isGreyForUWPI)
{
    this->isGreyForUWPI = isGreyForUWPI;
    setcolorbar();
    updateAxisXY();

}

void spectrogram::setcolorbar()
{
    const QwtInterval zInterval = d_spectrogram->data()->interval( Qt::ZAxis );
    // A color bar on the right axis
    QwtScaleWidget *rightAxis = axisWidget( QwtPlot::yRight );
    //rightAxis->setTitle( "Intensity Map" );
    rightAxis->setColorBarEnabled( true );
    if (this->isIntData == false)
    {
        if(isGreyForUWPI)
        {
            rightAxis->setColorMap( zInterval, new ColorMapGrey() );
            d_spectrogram->setColorMap(new ColorMapGrey());
        }
        else
        {
            rightAxis->setColorMap( zInterval, new ColorMap()  );
            d_spectrogram->setColorMap( new ColorMap() );
            //data
        }
    }
    else
    {
        rightAxis->setColorMap( zInterval, new VTWAMColorMap() );
        d_spectrogram->setColorMap( new VTWAMColorMap());
    }

    setAxisScale( QwtPlot::yRight, zInterval.minValue(), zInterval.maxValue() );
    enableAxis( QwtPlot::yRight );
}


void spectrogram::savePlot(QString outfolderpath)
{
    QSizeF t3((scanInfoPtr->scanWidth) + 1, (scanInfoPtr->scanHeight) + 1);
    t3.scale(110, 110,Qt::KeepAspectRatioByExpanding);
    //renderer.renderDocument(this,outfolderpath+".jpeg","jpeg",t3,85);
    renderer.renderDocument(this,outfolderpath+".bmp","bmp",t3,100); // bigger file but better results
}

void spectrogram::setMovieImageSize()
{
    const double mmToInch = 1.0 / 25.4;
    const int resolution = 85;

    QwtPlotRenderer renderer;
    QSizeF sizeMM(scanInfoPtr->scanWidth, scanInfoPtr->scanHeight);
    sizeMM.scale(80, 80,Qt::KeepAspectRatioByExpanding);

    const QSizeF size = sizeMM * mmToInch * resolution;
    const QRectF documentRect( 0.0, 0.0, size.width(), size.height() );

    imageRect = documentRect.toRect();
    const int dotsPerMeter = qRound( resolution * mmToInch * 1000.0 );

    if (imageForMovie!=NULL)
    {
        delete imageForMovie;
        imageForMovie = NULL;
    }

    imageForMovie = new QImage( imageRect.size(), QImage::Format_ARGB32 );
    imageForMovie->setDotsPerMeterX( dotsPerMeter );
    imageForMovie->setDotsPerMeterY( dotsPerMeter );
    imageForMovie->fill( QColor( Qt::white ).rgb() );

    //QPixmap pixMapCur(imageRect.size());
    pixMapCurptr = new QPixmap (imageRect.size());
    //scaled(imageRect.width(),imageRect.height(),Qt::IgnoreAspectRatio, Qt::SmoothTransformation);
/*
    if (painterForMovie!=NULL)
    {
        delete painterForMovie;
        painterForMovie = NULL;
    }
*/
    //painterForMovie = new QPainter( imageForMovie );

    painterForMovie = new QPainter( pixMapCurptr );
}

QPixmap spectrogram::getPlotPixmap()
{
    renderer.render(this,painterForMovie,imageRect);
    return(QPixmap::fromImage(pixMapCurptr->toImage().mirrored()));
}

void spectrogram::SaveMovie(QString outfolderpath)
{

    /*
    QString file("demo.avi");
    QByteArray fileArr = file.toUtf8();
    HBITMAP hbm;
    //
    HAVI avi = CreateAvi(fileArr.toStdString().c_str(),100,NULL);
    QList<QPixmap> images;
    for (int frame=0; frame < images.size(); frame++) {
        hbm = qt_pixmapToWinHBITMAP(images.at(frame));
        AddAviFrame(avi,hbm);
    }
    CloseAvi(avi);
    */
}

void spectrogram::updateData(void *framePointer, QString title, bool isIntData)
{
    if (title != NULL)
        this->title = title;

    this->setTitle(this->title);

    if (this->data->isIntData            = isIntData)
        this->data->intframePointer      = (int*)framePointer;
    else
        this->data->shortframePointer    = (short*)framePointer;

    if (this->zoomer->isIntData          = isIntData)
        this->zoomer->intframePointer    = (int*)framePointer;
    else

        this->zoomer->shortframePointer  = (short*)framePointer;

    this->isIntData = isIntData;

    setcolorbar(); //isIntData means VTWAM result

    replot();
}

/*
 * x_length 101 y_length 101 canvasWidth 400 396 canvasHeight 360 356 //colourBar
x_length 101 y_length 101 canvasWidth 426 canvasHeight 360 // no titleforColourBar
x_length 101 y_length 101 canvasWidth 510 506 canvasHeight 360 356 //noColourBar
*/
